// Mocks generated by Mockito 5.4.2 from annotations
// in game_buddy/test/unit_test/questions_unit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:game_buddy/core/errors/failures.dart' as _i5;
import 'package:game_buddy/features/questions/domain/useCase/questions_use_case.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [QuestionsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuestionsUseCase extends _i1.Mock implements _i3.QuestionsUseCase {
  MockQuestionsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<String>>> getGamesByType(
          String? type) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGamesByType,
          [type],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, List<String>>>.value(
            _FakeEither_0<_i5.Failure, List<String>>(
          this,
          Invocation.method(
            #getGamesByType,
            [type],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<String>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<List<String>>>> getQuestionsByGame(
          String? game) =>
      (super.noSuchMethod(
        Invocation.method(
          #getQuestionsByGame,
          [game],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<List<String>>>>.value(
                _FakeEither_0<_i5.Failure, List<List<String>>>(
          this,
          Invocation.method(
            #getQuestionsByGame,
            [game],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<List<String>>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, String>> addGame(
          Map<String, dynamic>? gameDetails) =>
      (super.noSuchMethod(
        Invocation.method(
          #addGame,
          [gameDetails],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, String>>.value(
            _FakeEither_0<_i5.Failure, String>(
          this,
          Invocation.method(
            #addGame,
            [gameDetails],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, String>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, String>> addGameAnswers(
          List<String>? answers) =>
      (super.noSuchMethod(
        Invocation.method(
          #addGameAnswers,
          [answers],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, String>>.value(
            _FakeEither_0<_i5.Failure, String>(
          this,
          Invocation.method(
            #addGameAnswers,
            [answers],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, String>>);
}
